h <- eta_params$HIV_compartment[x]%%10
p <- eta_params$P_compartment[x]
eta_i_h_p [i,h, p] <<- eta_params$Reference_expected_value[x]
})
rm(eta_params)
######Parameters for death and aging rates#######
#Rate of entry into the population due to aging into TB compartment t, HIV com- partment h and gender compartment g, per year, ∀t ∈ {1,3,4,5} ⊂ TB,h ∈ {1,2} ⊂ HIV,g ∈ G
rho_t_h_g <-array(data = 0, dim = c(length(TB_SET),
length(HIV_SET),
length(G_SET)))
#filter dataframe for rho params
rho_params <- param_df%>%
filter(notation == 'rho')
lapply(c(TB_SUBSET_UNINFECTED_NOIPT, TB_SUBSET_INFECTED_RECENT, TB_SUBSET_INFECTED_RECENT, TB_SUBSET_ACTIVE), function(t){
lapply(c(HIV_SUBSET_NEG, HIV_SUBSET_POS_CD4MORE), function(h){
lapply(G_SET, function(g){
temp <- rho_params%>%
filter(TB_compartment == t,
HIV_compartment == h,
G_compartment == g)
rho_t_h_g[t,h,g] <<-temp$Reference_expected_value
})
})
})
rm(rho_params)
#Mortality rates from populations in TB compartment t and HIV compartment h and gender compartment g, per year, ∀t ∈ T B, ∀h ∈ HIV, g ∈ G
mu_t_h_g<-array(data = 0, dim = c(length(TB_SET),
length(HIV_SET),
length(G_SET)))
#filter dataframe for mu params
mu_params <- param_df%>%
filter(notation == 'mu')
lapply(TB_SET, function(t){
lapply(HIV_SET, function(h){
lapply(G_SET, function(g){
temp <- mu_params%>%
filter(TB_compartment == t,
HIV_compartment == h,
G_compartment == g)
mu_t_h_g[t,h,g] <<-temp$Reference_expected_value
})
})
})
rm(mu_params)
#Rate of exit from the population due to aging
alpha <- 1/(65-15)
########Force of Infection (FOI) CALCULATIONS#####
FOI_DS <- function(active_pop, total_pop){
n = 1
numerator_MALE <- rep(0, times = length(HIV_SET))
numerator_FEMALE <- rep(0, times = length(HIV_SET))
lapply(G_SET, function(g){
lapply(HIV_SET, function(h){
if (g == G_SUBSET_M){
numerator_MALE[h] <<- phi_h[h] * active_pop[n]
} else {
numerator_FEMALE[h] <<- phi_h[h]*active_pop[n]
}
n <<- n + 1
})
})
lambda_1_1 <- beta_g[1]*(sum(numerator_MALE)/total_pop)
lambda_1_2 <- beta_g[2]*(sum(numerator_FEMALE)/total_pop)
return(c(lambda_1_1, lambda_1_2))
}
FOI_MDR <- function(lambda_1_g){
lambda_2_g <- c(0,0)
lapply(G_SET, function(g){
lambda_2_g[g] <<- (varepsilon_g[g]*lambda_1_g[g])/(1-varepsilon_g[g])
})
return(lambda_2_g)
}
######TB/SEIR model equations#####
#Create iterators that will be updated as they go through the different for loops
policy_id <- 1 #iterator for recording current policy evaluated
tau_itr <- 1 #iterator for recording current time
active_DS_pop_subset <- c(N_t_r_h_g_ref[TB_SUBSET_ACTIVE, DR_SUBSET_MDR, HIV_SET, G_SUBSET_M],
N_t_r_h_g_ref[TB_SUBSET_ACTIVE, DR_SUBSET_MDR, HIV_SET, G_SUBSET_F]) #ensures correct order males--> females
seir <- function(time, compartment_pop, parameters) {
with(as.list(c(compartment_pop, parameters)), {
# force of infection
active_pop <- compartment_pop[active_DS_pop_subset] # total active TB compartment populations
total_pop <- sum(compartment_pop) #sum total population
lambda_1_g <- FOI_DS(active_pop, total_pop)
lambda_2_g <- FOI_MDR(lambda_1_g)
#record FOI for evaluation
if ((time >= TT_SET[tau_itr]) & (tau_itr <= length(TT_SET))){
lambda_r_g_tau_p[DR_SUBSET_DS, G_SET, tau_itr, policy_id] <<- lambda_1_g
lambda_r_g_tau_p[DR_SUBSET_MDR, G_SET, tau_itr, policy_id] <<- lambda_2_g
tau_itr <<- tau_itr + 1 #id loc in TT set getting evaluated for proper recording
}
lambda_r <-c(sum(lambda_1_g), sum(lambda_2_g))
lambda <- sum(lambda_r)
delta_pop <- rep(0, n_compartments) #net gains/losses in pop in compartment
names(delta_pop)<-d_compartment_id
### TB compartment 1 (Uninfected no IPT) ##
lapply(DR_SET, function(r){
lapply(HIV_SET, function(h){
lapply(G_SET, function(g){
t = TB_SUBSET_UNINFECTED_NOIPT
#lookup current compartment loc in 1D array
current_compartment_loc <- N_t_r_h_g_ref[t, r, h, g]
#since DS is not applicable for unifected compartments assign all DR == 1
if (r == 1){
#look up relative compartment pop locations in 1D array
other_hiv_ids <- HIV_SET[-h]
other_hiv_loc1 <- N_t_r_h_g_ref[t, r, other_hiv_ids[1], g]
other_hiv_loc2 <- N_t_r_h_g_ref[t, r, other_hiv_ids[2], g]
other_hiv_loc3 <- N_t_r_h_g_ref[t, r, other_hiv_ids[3], g]
tb_compartment_2_loc <- N_t_r_h_g_ref[t, r, h, g]
#calculate net gains/losses in compartment
delta_pop[current_compartment_loc] <<- rho_t_h_g[t,h,g]*total_pop +
eta_i_h_p[other_hiv_ids[1], h, policy_id]*compartment_pop[other_hiv_loc1] +
eta_i_h_p[other_hiv_ids[2], h, policy_id]*compartment_pop[other_hiv_loc2] +
eta_i_h_p[other_hiv_ids[3], h, policy_id]*compartment_pop[other_hiv_loc3] +
omega*compartment_pop[tb_compartment_2_loc] -
#losses
((alpha +
mu_t_h_g[t,h,g] +
lambda +
kappa_t_h_g_p[t,h,g,policy_id] +
sum(eta_i_h_p[h, other_hiv_ids, policy_id]))*compartment_pop[current_compartment_loc])
}
})
})
})
### TB compartment 2 (uninfected no IPT_##
lapply(DR_SET, function(r){
lapply(HIV_SET, function(h){
lapply(G_SET, function(g){
t = TB_SUBSET_UNINFECTED_NOIPT
#lookup current compartment loc in 1D array
current_compartment_loc <- N_t_r_h_g_ref[t, r, h, g]
#since DS is not applicable for unifected compartments
if (r == 1){
#look up relative compartment pop locations in 1D array
other_hiv_ids <- HIV_SET[-h]
other_hiv_loc1 <- N_t_r_h_g_ref[t, r, other_hiv_ids[1], g]
other_hiv_loc2 <- N_t_r_h_g_ref[t, r, other_hiv_ids[2], g]
other_hiv_loc3 <- N_t_r_h_g_ref[t, r, other_hiv_ids[3], g]
tb_compartment_1_loc <- N_t_r_h_g_ref[1, r, h, g]
#calculate net gains/losses in compartment
delta_pop[current_compartment_loc] <<- eta_i_h_p[other_hiv_ids[1], h, policy_id]*compartment_pop[other_hiv_loc1] +
eta_i_h_p[other_hiv_ids[2], h, policy_id]*compartment_pop[other_hiv_loc2] +
eta_i_h_p[other_hiv_ids[3], h, policy_id]*compartment_pop[other_hiv_loc3] +
kappa_t_h_g_p[t, h, g, policy_id]*compartment_pop[tb_compartment_1_loc] -
#losses
((alpha +
mu_t_h_g[t,h,g] +
omega +
iota_r[DR_SUBSET_DS]*lambda_r[DR_SUBSET_DS] +
iota_r[DR_SUBSET_MDR]*lambda_r[DR_SUBSET_MDR] +
sum(eta_i_h_p[h, other_hiv_ids,policy_id]))*compartment_pop[current_compartment_loc])
}
})
})
})
### TB compartment 3 (infected recently) ##
lapply(DR_SET, function(r){
lapply(HIV_SET, function(h){
lapply(G_SET, function(g){
t = TB_SUBSET_INFECTED_RECENT
#lookup current compartment loc in 1D array
current_compartment_loc <- N_t_r_h_g_ref[t, r, h, g]
#look up relative compartment pop locations in 1D array
other_hiv_ids <- HIV_SET[-h]
other_hiv_loc1 <- N_t_r_h_g_ref[t, r, other_hiv_ids[1], g]
other_hiv_loc2 <- N_t_r_h_g_ref[t, r, other_hiv_ids[2], g]
other_hiv_loc3 <- N_t_r_h_g_ref[t, r, other_hiv_ids[3], g]
tb_compartment_1_loc<-N_t_r_h_g_ref[1,1,h,g] #we ref DR compartment 1 since we assume unifected is in that compartment
tb_compartment_2_loc<-N_t_r_h_g_ref[2,1,h,g]
tb_compartment_4_loc<-N_t_r_h_g_ref[4,r,h,g]
tb_compartment_7_loc<-N_t_r_h_g_ref[7,r,h,g]
tb_compartment_8_loc<-N_t_r_h_g_ref[8,r,h,g]
#calculate net gains/losses in compartment
delta_pop[current_compartment_loc] <<- rho_t_h_g[t,h,g]*total_pop +
eta_i_h_p[other_hiv_ids[1], h, policy_id]*compartment_pop[other_hiv_loc1] +
eta_i_h_p[other_hiv_ids[2], h, policy_id]*compartment_pop[other_hiv_loc2] +
eta_i_h_p[other_hiv_ids[3], h, policy_id]*compartment_pop[other_hiv_loc3] +
lambda_r[r]*compartment_pop[tb_compartment_1_loc] +
iota_r[r]*lambda_r[r]*compartment_pop[tb_compartment_2_loc]+
((zeta*lambda_r[r])*sum(compartment_pop[c(tb_compartment_4_loc, tb_compartment_7_loc)]))+
((upsilon*lambda_r[r])*compartment_pop[tb_compartment_8_loc]) -
#losses
((alpha +
mu_t_h_g[t,h,g] +
pi_i_t[t,4] +
kappa_t_h_g_p[t, h, g, policy_id] +
varpi_g_p[g,policy_id]*theta_h[h]*pi_i_t[t,6] +
sum(eta_i_h_p[h, other_hiv_ids,policy_id]))*compartment_pop[current_compartment_loc])
})
})
})
### TB compartment 4 (infected remotely) ##
lapply(DR_SET, function(r){
lapply(HIV_SET, function(h){
lapply(G_SET, function(g){
t = TB_SUBSET_INFECTED_REMOTE
#lookup current compartment loc in 1D array
current_compartment_loc <- N_t_r_h_g_ref[t, r, h, g]
#look up relative compartment pop locations in 1D array
other_hiv_ids <- HIV_SET[-h]
other_hiv_loc1 <- N_t_r_h_g_ref[t, r, other_hiv_ids[1], g]
other_hiv_loc2 <- N_t_r_h_g_ref[t, r, other_hiv_ids[2], g]
other_hiv_loc3 <- N_t_r_h_g_ref[t, r, other_hiv_ids[3], g]
tb_compartment_3_pop_loc <- N_t_r_h_g_ref[3,r,h,g]
#calculate net gains/losses in compartment
delta_pop[current_compartment_loc] <<- rho_t_h_g[t,h,g]*total_pop +
eta_i_h_p[other_hiv_ids[1], h, policy_id]*compartment_pop[other_hiv_loc1] +
eta_i_h_p[other_hiv_ids[2], h, policy_id]*compartment_pop[other_hiv_loc2] +
eta_i_h_p[other_hiv_ids[3], h, policy_id]*compartment_pop[other_hiv_loc3] +
pi_i_t[3,t]*compartment_pop[tb_compartment_3_pop_loc] -
#losses
((alpha +
mu_t_h_g[t,h,g] +
zeta*lambda_r[r] +
kappa_t_h_g_p[t,h,g,policy_id]+
varpi_g_p[g,policy_id]*theta_h[h]*pi_i_t[t,6]+
sum(eta_i_h_p[h, other_hiv_ids,policy_id]))*compartment_pop[current_compartment_loc])
})
})
})
### TB compartment 5 (LTBI, on IPT) ##
lapply(DR_SET, function(r){
lapply(HIV_SET, function(h){
lapply(G_SET, function(g){
t = TB_SUBSET_INFECTED_IPT
#lookup current compartment loc in 1D array
current_compartment_loc <- N_t_r_h_g_ref[t, r, h, g]
#look up relative compartment pop locations in 1D array
other_hiv_ids <- HIV_SET[-h]
other_hiv_loc1 <- N_t_r_h_g_ref[t, r, other_hiv_ids[1], g]
other_hiv_loc2 <- N_t_r_h_g_ref[t, r, other_hiv_ids[2], g]
other_hiv_loc3 <- N_t_r_h_g_ref[t, r, other_hiv_ids[3], g]
tb_compartment_3_pop_loc <- N_t_r_h_g_ref[3, r, h, g]
tb_compartment_4_pop_loc <- N_t_r_h_g_ref[4, r, h, g]
#calculate net gains/losses in compartment
delta_pop[current_compartment_loc] <<- eta_i_h_p[other_hiv_ids[1], h, policy_id]*compartment_pop[other_hiv_loc1] +
eta_i_h_p[other_hiv_ids[2], h, policy_id]*compartment_pop[other_hiv_loc2] +
eta_i_h_p[other_hiv_ids[3], h, policy_id]*compartment_pop[other_hiv_loc3] +
kappa_t_h_g_p[3,h,g,policy_id]*compartment_pop[tb_compartment_3_pop_loc] +
kappa_t_h_g_p[4,h,g,policy_id]*compartment_pop[tb_compartment_4_pop_loc] -
((alpha +
mu_t_h_g[t,h,g] +
varpi_g_p[g,policy_id]*theta_h[h]*pi_i_t[t, 6] +
gamma_r[r]*omega +
sum(eta_i_h_p[h, other_hiv_ids,policy_id]))*compartment_pop[current_compartment_loc])
})
})
})
### TB compartment 6 (Active TB) ##
lapply(DR_SET, function(r){
lapply(HIV_SET, function(h){
lapply(G_SET, function(g){
t = TB_SUBSET_ACTIVE
#lookup current compartment loc in 1D array
current_compartment_loc <- N_t_r_h_g_ref[t, r, h, g]
#look up relative compartment pop locations in 1D array
other_hiv_ids <- HIV_SET[-h]
other_hiv_loc1 <- N_t_r_h_g_ref[t, r, other_hiv_ids[1], g]
other_hiv_loc2 <- N_t_r_h_g_ref[t, r, other_hiv_ids[2], g]
other_hiv_loc3 <- N_t_r_h_g_ref[t, r, other_hiv_ids[3], g]
tb_compartment_3_pop_loc <- N_t_r_h_g_ref[3, r, h, g]
tb_compartment_4_pop_loc <- N_t_r_h_g_ref[4, r, h, g]
tb_compartment_5_pop_loc <- N_t_r_h_g_ref[3, r, h, g]
#calculate net gains/losses in compartment
delta_pop[current_compartment_loc] <<- rho_t_h_g[t,h,g]*total_pop +
eta_i_h_p[other_hiv_ids[1], h, policy_id]*compartment_pop[other_hiv_loc1] +
eta_i_h_p[other_hiv_ids[2], h, policy_id]*compartment_pop[other_hiv_loc2] +
eta_i_h_p[other_hiv_ids[3], h, policy_id]*compartment_pop[other_hiv_loc3] +
varpi_g_p[g,policy_id]*theta_h[h]*pi_i_t[3,t]*compartment_pop[tb_compartment_3_pop_loc]+
varpi_g_p[g,policy_id]*theta_h[h]*pi_i_t[4,t]*compartment_pop[tb_compartment_4_pop_loc]+
varpi_g_p[g,policy_id]*theta_h[h]*pi_i_t[5,t]*compartment_pop[tb_compartment_5_pop_loc] -
#losses
((alpha +
mu_t_h_g[t,h,g] +
pi_i_t[t,7] +
sum(eta_i_h_p[h, other_hiv_ids,policy_id]))*compartment_pop[current_compartment_loc])
})
})
})
### TB compartment 7##
lapply(DR_SET, function(r){
lapply(HIV_SET, function(h){
lapply(G_SET, function(g){
t = TB_SUBSET_RECOVERED
#lookup current compartment loc in 1D array
current_compartment_loc <- N_t_r_h_g_ref[t, r, h, g]
#look up relative compartment pop locations in 1D array
other_hiv_ids <- HIV_SET[-h]
other_hiv_loc1 <- N_t_r_h_g_ref[t, r, other_hiv_ids[1], g]
other_hiv_loc2 <- N_t_r_h_g_ref[t, r, other_hiv_ids[2], g]
other_hiv_loc3 <- N_t_r_h_g_ref[t, r, other_hiv_ids[3], g]
tb_compartment_6_pop_loc <- N_t_r_h_g_ref[6,r,h,g]
#calculate net gains/losses in compartment
delta_pop[current_compartment_loc] <<- eta_i_h_p[other_hiv_ids[1], h, policy_id]*compartment_pop[other_hiv_loc1] +
eta_i_h_p[other_hiv_ids[2], h, policy_id]*compartment_pop[other_hiv_loc2] +
eta_i_h_p[other_hiv_ids[3], h, policy_id]*compartment_pop[other_hiv_loc3] +
pi_i_t[6,t]*compartment_pop[tb_compartment_6_pop_loc] -
#losses
((alpha +
mu_t_h_g[t,h,g] +
zeta*lambda_r[r] +
sum(eta_i_h_p[h, other_hiv_ids,policy_id]))*compartment_pop[current_compartment_loc])
})
})
})
### TB compartment 8##
lapply(DR_SET, function(r){
lapply(HIV_SET, function(h){
lapply(G_SET, function(g){
t = TB_SUBSET_AFTERIPT
#lookup current compartment loc in 1D array
current_compartment_loc <- N_t_r_h_g_ref[t, r, h, g]
#look up relative compartment pop locations in 1D array
other_hiv_ids <- HIV_SET[-h]
other_hiv_loc1 <- N_t_r_h_g_ref[t, r, other_hiv_ids[1], g]
other_hiv_loc2 <- N_t_r_h_g_ref[t, r, other_hiv_ids[2], g]
other_hiv_loc3 <- N_t_r_h_g_ref[t, r, other_hiv_ids[3], g]
tb_compartment_5_pop_loc <- N_t_r_h_g_ref[5,r,h,g]
#calculate net gains/losses in compartment
delta_pop[current_compartment_loc] <<- eta_i_h_p[other_hiv_ids[1], h, policy_id]*compartment_pop[other_hiv_loc1] +
eta_i_h_p[other_hiv_ids[2], h, policy_id]*compartment_pop[other_hiv_loc2] +
eta_i_h_p[other_hiv_ids[3], h, policy_id]*compartment_pop[other_hiv_loc3] +
gamma_r[r]*omega*compartment_pop[tb_compartment_5_pop_loc] -
((alpha +
mu_t_h_g[t,h,g] +
upsilon*lambda_r[r] +
sum(eta_i_h_p[h, other_hiv_ids,policy_id]))*compartment_pop[current_compartment_loc])
})
})
})
return(list(c(delta_pop)))
})
}
out_all_df <- data.frame(matrix(ncol = n_compartments+2, nrow = 0))
colnames(out_all_df) <- c('time', compartment_id, 'policy_id')
lapply(P_SET, function(p){
lapply(seq(.001, .009, .001), function(b1){
lapply(seq(.001, .009, .001), function(b2){
beta_g<<-c(b1, b2)
#set policy id
policy_id <<- p
#reset tau itr
tau_itr <<- 1
out <- ode(y = compartments_init,
times = TT_SET,
func = seir,
parms = c())
out <- as.data.frame(out)
out$policy_id <- rep(policy_id, length(TT_SET))
out$beta_1<- rep(b1, length(TT_SET))
out$beta_2<- rep(b2, length(TT_SET))
out_all_df <<- rbind(out_all_df, out)
})
})
})
#calculate N(t)/total population at each timestep
out_all_df <- out_all_df%>% mutate(total_pop = rowSums(.[1:129]))
out_all_df$policy_id <-as.factor(out_all_df$policy_id)
######Graphs#######
#all active
active_pops_df <- out_all_df[,c(1, (c(N_t_r_h_g_ref[6, DR_SET, c(2,3,4), G_SET])+1), 130)]
active_pops_df <- melt(active_pops_df, id.vars = c('time', 'policy_id'))
active_pops_df <- active_pops_df%>%
left_join(out_all_df[,c(1,ncol(out_all_df))], by = 'time')
active_pops_df$policy_id <- as.factor(active_pops_df$policy_id)
temp <- out_all_df[,c(1,130,131)]
#total active pops
active_pops_df_group_by_compartments <- active_pops_df%>%
group_by(time, policy_id)%>%
summarise(total_active_pop = sum(value))%>%
left_join(.,temp, by = c('time', 'policy_id'))%>%
ungroup()%>%
mutate(percent_active_pop = total_active_pop/total_pop)
active_pops_df_group_by_compartments$policy_id <- as.factor(active_pops_df_group_by_compartments$policy_id)
active_pops_df_group_by_compartments %>%
ggplot(.,aes(x=time,y = percent_active_pop, group = as.factor(policy_id), color = as.factor(policy_id))) +geom_line() + theme_bw() + labs (x = "Time", y = "Percent of Population", title = "Percent of population that has active TB over time \n by policy") + xlim(.3, max(active_pops_df$time))
active_pops_df_group_by_compartments %>%
ggplot(.,aes(x=time,y = total_active_pop, group = as.factor(policy_id), color = as.factor(policy_id))) +geom_line() + theme_bw() + labs (x = "Time", y = "Total Active Population", title = "Total population that has active TB over time \n by policy") + xlim(.3, max(active_pops_df$time))
active_pops_df_group_by_compartments %>%
ggplot(.,aes(x=time,y = total_pop, group = as.factor(policy_id), color = as.factor(policy_id))) +geom_line() + theme_bw() + labs (x = "Time", y = "Total Population", title = "Total population over time \n by policy") + xlim(.3, max(active_pops_df$time))
#debugging
active_pops_df_t5 <- out_all_df[,c(1, (c(N_t_r_h_g_ref[6, DR_SET, HIV_SET, G_SET])+1), 130)]
active_pops_df_t5 <-active_pops_df_t5 %>%filter(time == 2.5)
active_pops_df_t5<-active_pops_df_t5%>%select(-c('time'))
active_pops_df_t5<-t(active_pops_df_t5)
colnames(active_pops_df_t5) <-c('policy_1', 'policy_2', 'policy_3')
active_pops_df_t5 <- tibble::rownames_to_column(as.data.frame(active_pops_df_t5), "compartment")
active_pops_df_t5$policy_1 <-unfactor(active_pops_df_t5$policy_1)
active_pops_df_t5$policy_2 <-unfactor(active_pops_df_t5$policy_2)
active_pops_df_t5$policy_3 <-unfactor(active_pops_df_t5$policy_3)
active_pops_df_t5 <- active_pops_df_t5[-nrow(active_pops_df_t5),]
active_pops_df_t5$diff <- active_pops_df_t5$policy_1 - active_pops_df_t5$policy_3
totals<-sapply(active_pops_df_t5[,c(2,3,4)], sum)
#FOI over time
FOI_overtime_graph_df<-melt(lambda_r_g_tau_p)
colnames(FOI_overtime_graph_df)<-c('drug_resistance', 'gender', 'time', 'policy_id', 'FOI')
FOI_overtime_graph_df <- FOI_overtime_graph_df%>%
group_by(time, policy_id)%>%
summarise(FOI = sum(FOI))
colnames(FOI_overtime_graph_df)[colnames(FOI_overtime_graph_df) == 'time'] <- 'time_set_id'
time_set_match_df<-as.data.frame(cbind(seq(length(TT_SET)), TT_SET))
colnames(time_set_match_df) <-c('time_set_id', 'time')
FOI_overtime_graph_df<- FOI_overtime_graph_df%>%
left_join(., time_set_match_df, by = 'time_set_id')
FOI_overtime_graph_df%>%
ggplot(.,aes(x=time,y = as.double(FOI), group = policy_id, color = as.factor(policy_id))) +geom_line() + theme_bw() + labs (x = "Time", y = "FOI Rate", title = "Force of Infection (FOI) Rate \n Over Time By Policy") + xlim(.3, 5) + guides(color=guide_legend(title="Policy ID")) + scale_y_continuous(labels = function(x) format(x, scientific = FALSE))
active_pops_df
View(active_pops_df)
active_pops_df <- out_all_df[,c(1, (c(N_t_r_h_g_ref[6, DR_SET, c(2,3,4), G_SET])+1), 130)]
len(active_pops_df)
length(active_pops_df)
ncol(active_pops_df)
nrow(active_pops_df)
View(out_all_df)
out_all_df$policy_id <-as.factor(out_all_df$policy_id)
active_pops_df <- out_all_df[,c(1, (c(N_t_r_h_g_ref[6, DR_SET, c(2,3,4), G_SET])+1), 130)]
#all active
active_pops_df <- out_all_df[,c(1, (c(N_t_r_h_g_ref[6, DR_SET, c(2,3,4), G_SET])+1), 130, 131, 132)]
active_pops_df <- melt(active_pops_df, id.vars = c('time', 'policy_id', 'beta_1', 'beta_2'))
#total active pops
active_pops_df_group_by_compartments <- active_pops_df%>%
group_by(time, policy_id, beta_1, beta_2)%>%
summarise(total_active_pop = sum(value))%>%
left_join(.,temp, by = c('time', 'policy_id'))%>%
ungroup()%>%
mutate(percent_active_pop = total_active_pop/total_pop)
#all active
active_pops_df <- out_all_df[,c(1, (c(N_t_r_h_g_ref[6, DR_SET, c(2,3,4), G_SET])+1), 130, 131, 132, 133)]
active_pops_df <- melt(active_pops_df, id.vars = c('time', 'policy_id', 'beta_1', 'beta_2'))
#all active
active_pops_df <- out_all_df[,c(1, (c(N_t_r_h_g_ref[6, DR_SET, c(2,3,4), G_SET])+1), 130, 131, 132, 133)]
active_pops_df <- melt(active_pops_df, id.vars = c('time', 'policy_id', 'beta_1', 'beta_2', 'total_pop'))
active_pops_df
View(active_pops_df)
active_pops_df_grouped<-active_pops_df%>%
group_by(time, policy_id, beta_1, beta_2, total_pop)%>%
summarise(active_pop = sum(value))
View(active_pops_df_grouped)
#clean workspace
rm(list = ls())
gc()
#load packages
sapply(c('dplyr', 'deSolve', 'readxl', 'stringr', 'reshape2', 'ggplot2', 'varhandle', 'here', 'paletteer'), require, character.only=T)
indir<-'param_files/'
outdir<-'test_outputs/calibration'
#read parameter file
setwd(here(indir))
prevalence_df<-read.csv("GBD_prev_1990_2017_jul28.csv")
param_df <- read_excel("Epi_parameters_June_24_2020.xlsx", sheet = 'Model_Matched_Parameters')
pop_init_df <- read_excel("Epi_parameters_June_24_2020.xlsx", sheet = 'Pop_Init')
#clean workspace
rm(list = ls())
gc()
#load packages
sapply(c('dplyr', 'deSolve', 'readxl', 'stringr', 'reshape2', 'ggplot2', 'varhandle', 'here', 'paletteer'), require, character.only=T)
indir<-'param_files/'
outdir<-'test_outputs/calibration'
#read parameter file
setwd(here(indir))
prevalence_df<-read.csv("GBD_prev_1990_2017_jul28.csv")
param_df <- read_excel("Epi_parameters_June_24_2020.xlsx", sheet = 'Model_Matched_Parameters')
prevalence_df<-read.csv("GBD_prev_1990_2017_jul28.csv")
param_df <- read_excel("Epi_model_parameters.xlsx", sheet = 'Model_Matched_Parameters')
pop_init_df <- read_excel("Epi_model_parameters.xlsx", sheet = 'Pop_Init')
prevalence_df<-prevalence_df%>%
mutate(group_id = if_else(sex_id == 1 & cause_id == 934|
sex_id == 1 & cause_id == 946|
sex_id == 1 & cause_id == 947, 1,
if_else(sex_id == 2 & cause_id == 934|
sex_id == 2 & cause_id == 946|
sex_id == 2 & cause_id == 947, 2,
if_else(sex_id == 1 & cause_id == 948|
sex_id == 1 & cause_id == 949|
sex_id == 1 & cause_id == 950, 3,
if_else(sex_id == 2 & cause_id == 948|
sex_id == 2 & cause_id == 949|
sex_id == 2 & cause_id == 950, 4,
if_else(sex_id == 1 & cause_id == 954, 5,
if_else(sex_id == 2 & cause_id == 954, 6,
100)))))))
#filter to only include relevant values
prevalence_df<-prevalence_df%>%
filter(group_id != 100)%>%
filter(measure_id == 5 & metric_id == 3)%>%
group_by(group_id, year)%>%
summarise(expected = sum(val),
upper = sum(upper),
lower = sum(lower))
df_active<-prevalence_df%>%
filter(group_id == 1|
group_id == 2|
group_id == 3|
group_id == 4)
df_active$compartment <- if_else(df_active$group_id == 1, 'HIV-, Male',
if_else(df_active$group_id == 2, 'HIV-, Female',
if_else(df_active$group_id == 3, 'HIV+, Male',
'HIV+, Female')))
df_active$group_id<-as.factor(df_active$group_id)
active_prev_overtime <- ggplot(df_active, aes(x = year,
y = expected,
group = compartment,
color = compartment))+
geom_line() +
geom_point()+
geom_errorbar(aes(ymin=lower, ymax=upper), width=.2,
position=position_dodge(0.05))+
labs(title = "active prevalence overtime",
y = 'prevalence') +
scale_color_manual(values=c(paletteer_dynamic("cartography::green.pal", 4)))
print(active_prev_overtime)
