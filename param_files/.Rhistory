#filter to only include relevant values
prevalence_df<-prevalence_df%>%
filter(group_id != 100)%>%
filter(measure_id == 5 & metric_id == 3)%>%
group_by(group_id, year)%>%
summarise(expected = sum(val),
upper = sum(upper),
lower = sum(lower))
df_active<-prevalence_df%>%
filter(group_id == 1|
group_id == 2|
group_id == 3|
group_id == 4)
df_active$compartment <- if_else(df_active$group_id == 1, 'HIV-, Male',
if_else(df_active$group_id == 2, 'HIV-, Female',
if_else(df_active$group_id == 3, 'HIV+, Male',
'HIV+, Female')))
df_active$group_id<-as.factor(df_active$group_id)
active_prev_overtime <- ggplot(df_active, aes(x = year,
y = expected,
group = compartment,
color = compartment))+
geom_line() +
geom_point()+
geom_errorbar(aes(ymin=lower, ymax=upper), width=.2,
position=position_dodge(0.05))+
labs(title = "active prevalence overtime",
y = 'prevalence') +
scale_color_manual(values=c(paletteer_dynamic("cartography::green.pal", 4)))
print(active_prev_overtime)
#clean workspace
rm(list = ls())
gc()
#load packages
sapply(c('dplyr', 'deSolve', 'readxl', 'stringr', 'reshape2', 'ggplot2', 'varhandle'), require, character.only=T)
#define input and output directories
indir<-'param_files/'
outdir<-'test_outputs/epi_model'
#read parameter file
setwd(here(indir))
#clean workspace
rm(list = ls())
gc()
#clean workspace
rm(list = ls())
gc()
#load packages
sapply(c('dplyr', 'deSolve', 'readxl', 'stringr', 'reshape2', 'ggplot2', 'varhandle', 'here'), require, character.only=T)
#define input and output directories
indir<-'param_files/'
outdir<-'test_outputs/epi_model'
#read parameter file
setwd(here(indir))
param_df <- read_excel("Epi_model_parameters.xlsx", sheet = 'Model_Matched_Parameters')
pop_init_df <- read_excel("Epi_model_parameters.xlsx", sheet = 'Pop_Init')
####clean df for input####
#remove all spaces from column names
names(param_df)<-str_replace_all(names(param_df), c(" " = "_" , "-" = "_" ))
names(pop_init_df)<-str_replace_all(names(pop_init_df), c(" " = "_" , "-" = "_" ))
#make sure all compartments are integer type for proper indexing#
param_df$TB_compartment<-as.integer(param_df$TB_compartment)
param_df$DR_compartment<-as.integer(param_df$DR_compartment)
param_df$HIV_compartment<-as.integer(param_df$HIV_compartment)
param_df$G_compartment<-as.integer(param_df$G_compartment)
param_df$P_compartment<-as.integer(param_df$P_compartment)
pop_init_df$TB_compartment<-as.integer(pop_init_df$TB_compartment)
pop_init_df$DR_compartment<-as.integer(pop_init_df$DR_compartment)
pop_init_df$HIV_compartment<-as.integer(pop_init_df$HIV_compartment)
pop_init_df$G_compartment<-as.integer(pop_init_df$G_compartment)
TB_SET<-1:8
#TB subsets - groups of compartments
TB_SUBSET_UNINFECTED<-1:2
TB_SUBSET_IPT<-c(2,5)
TB_SUBSET_LTBI<-3:5
TB_SUBSET_IPT_INIT_FROM<-c(1,3,4)
#TB subsets - individual compartments
TB_SUBSET_UNINFECTED_NOIPT<-1
TB_SUBSET_UNINFECTED_IPT<-2
TB_SUBSET_INFECTED_RECENT<-3
TB_SUBSET_INFECTED_REMOTE<-4
TB_SUBSET_INFECTED_IPT<-5
TB_SUBSET_ACTIVE<-6
TB_SUBSET_RECOVERED<-7
TB_SUBSET_AFTERIPT<-8
DR_SET<-1:2
#TB subsets - individual compartments
DR_SUBSET_DS<-1
DR_SUBSET_MDR<-2
HIV_SET<-1:4
#HIV subset groups
HIV_SUBSET_POS_NOART<-2:3
#HIV subsets - individual compartments
HIV_SUBSET_NEG <- 1
HIV_SUBSET_POS_CD4MORE <-2
HIV_SUBSET_POS_CD4LESS <-3
HIV_SUBSET_POS_ART <- 4
#Genders (G): Male : 1, Female : 2
G_SET<-1:2
#Gender subsets - individual compartments
G_SUBSET_M<-1
G_SUBSET_F<-2
#Set of policies (P):
#1 : Standard of care only, no ART or IPT delivery (base)
#2: Standard of care and community-based ART delivery only, no IPT delivery
#3: Standard of care and community-based ART and IPT delivery
P_SET<-1:3
P_SUBSET_BASE <-1
P_SUBSET_NO_IPT_DELIVERY <-2
P_SUBSET_IPT_DELIVERY <- 3
#Time Horizon (5 years)
TT<-5
time_interval <- 1/12
TT_SET <- c(1:(12*TT))*time_interval
######create compartment ids and reference matrix to go between multidementional arrays and 1D array####
n_compartments <- length(TB_SET)*length(DR_SET)*length(HIV_SET)*length(G_SET)
compartment_id<-rep(NA, n_compartments)
#iterator for loop
n = 0
lapply(TB_SET, function(t){
lapply(DR_SET, function(r){
lapply(HIV_SET, function(h){
lapply(G_SET, function(g){
n <<- n+1
compartment_id[n] <<- paste0("N_", t, "_", r, "_", h, "_", g)
})
})
})
})
#create matrix to look up location of compartment in 1-D array
N_t_r_h_g_ref <-array(data = 0, dim = c(length(TB_SET),
length(DR_SET),
length(HIV_SET),
length(G_SET)))
#iterator for loop
n = 0
lapply(TB_SET, function(t){
lapply(DR_SET, function(r){
lapply(HIV_SET, function(h){
lapply(G_SET, function(g){
n <<- n + 1
N_t_r_h_g_ref[t,r,h,g] <<- n
})
})
})
})
#create delta compartment ids
d_compartment_id<-paste0('d', compartment_id)
#set initial populations
N_t_r_h_g_init <-c()
lapply(TB_SET, function(t){
lapply(DR_SET, function(r){
lapply(HIV_SET, function(h){
lapply(G_SET, function(g){
temp <- pop_init_df%>%
filter(TB_compartment == t,
DR_compartment == r,
HIV_compartment == h,
G_compartment == g)
N_t_r_h_g_init <<- c(N_t_r_h_g_init, temp$Reference_expected_value)
})
})
})
})
#make into 1D array for ODE
compartments_init <- c(N_t_r_h_g_init) #under all policies the initial pop is the same so can just set init population using any aribritrary policy
names(compartments_init) <- compartment_id
#create a matrix for recording FOI over time
lambda_r_g_tau_p <-array(data=0, dim = c(length(DR_SET),
length(G_SET),
length(TT_SET),
length(P_SET)
))
#create a matrix for recording deaths over time
mortality_t_r_h_g_tau_p <-array(data=0, dim = c(length(TB_SET),
length(DR_SET),
length(HIV_SET),
length(G_SET),
length(TT_SET),
length(P_SET)
))
#Number of effective contact for TB transmission per infectious year for gender g
beta_g <- array(data = 0, dim = length(G_SET))
#filter dataframe for beta params
beta_params <- param_df%>%
filter(notation == 'beta')
lapply(G_SET, function (g){
temp <- beta_params%>%filter(G_compartment == g)
beta_g[g] <<- temp$Reference_expected_value
})
#rm dataframe for beta params
rm(beta_params)
#Relative transmissibility of TB in populations living in HIV compartment h
phi_h <-array(data = 0, dim = length(HIV_SET))
#filter dataframe for phi params
phi_params <- param_df%>%
filter(notation == 'phi')
lapply(HIV_SET, function(h){
temp <- phi_params%>%filter(HIV_compartment == h)
phi_h[h] <<- temp$Reference_expected_value
})
rm(phi_params)
#Fraction of new TB infections that are MDR-TB
varepsilon_g <-array(data = 0, dim = length(G_SET))
#filter dataframe for varepsilon params
varepsilon_params <- param_df%>%
filter(notation == 'varepsilon')
lapply(G_SET, function(g){
temp <- varepsilon_params%>%filter(G_compartment == g)
varepsilon_g[g] <<- temp$Reference_expected_value
})
rm(varepsilon_params)
#Indicator for whether infection with given TB strain can occur while on IPT for populations in DR compartment r
iota_r <-array(data = 0, dim = length(DR_SET))
#filter dataframe for iota params
iota_params <- param_df%>%
filter(notation == 'iota')
lapply(DR_SET, function(r){
temp <- iota_params%>%filter(DR_compartment == r)
iota_r[r] <<- temp$Reference_expected_value
})
rm(iota_params)
#Indicator the diminished force of infection due to partially-protective effects of IPT after moving off of IPT for populations with LTBI
#filter dataframe for upsilon params
upsilon_params <- param_df%>%
filter(notation == 'upsilon')
upsilon <- upsilon_params$Reference_expected_value
rm(upsilon_params)
#Indicator that diminishes force of infection due to the partially-protective effect of LTBI infection and acquiring a new TB infection
#filter dataframe for zeta params
zeta_params <- param_df%>%
filter(notation == 'zeta')
zeta <- zeta_params$Reference_expected_value
rm(zeta_params)
kappa_t_h_g_p <- array(data = 0, dim = c(length(TB_SET),
length(HIV_SET),
length(G_SET),
length(P_SET)))
#filter dataframe for kappa params
kappa_params <- param_df%>%
filter(notation == 'kappa')
lapply(TB_SUBSET_IPT_INIT_FROM, function(t){
lapply(HIV_SET, function(h){
lapply(G_SET, function(g){
lapply(P_SET, function(p){
temp <- kappa_params%>%
filter(TB_compartment == t,
HIV_compartment == h,
G_compartment == g,
P_compartment == p)
kappa_t_h_g_p[t,h,g,p] <<- temp$Reference_expected_value
})
})
})
})
rm(kappa_params)
omega <- param_df%>%
filter(notation == 'omega')
omega
#filter dataframe for omega params
omega_params <- param_df%>%
filter(notation == 'omega')
View(omega_params)
omega <- omega_params$Reference_expected_value
omega
##Ref HIV_TB_Model_Appendix_Jun24.pdf##
#Last Modified: Jun 26
#clean workspace
rm(list = ls())
gc()
#load packages
sapply(c('dplyr', 'deSolve', 'readxl', 'stringr', 'reshape2', 'ggplot2', 'varhandle', 'here'), require, character.only=T)
#define input and output directories
indir<-'param_files/'
outdir<-'test_outputs/epi_model'
#read parameter file
setwd(here(indir))
param_df <- read_excel("Epi_model_parameters.xlsx", sheet = 'Model_Matched_Parameters')
pop_init_df <- read_excel("Epi_model_parameters.xlsx", sheet = 'Pop_Init')
####clean df for input####
#remove all spaces from column names
names(param_df)<-str_replace_all(names(param_df), c(" " = "_" , "-" = "_" ))
names(pop_init_df)<-str_replace_all(names(pop_init_df), c(" " = "_" , "-" = "_" ))
#make sure all compartments are integer type for proper indexing#
param_df$TB_compartment<-as.integer(param_df$TB_compartment)
param_df$DR_compartment<-as.integer(param_df$DR_compartment)
param_df$HIV_compartment<-as.integer(param_df$HIV_compartment)
param_df$G_compartment<-as.integer(param_df$G_compartment)
param_df$P_compartment<-as.integer(param_df$P_compartment)
pop_init_df$TB_compartment<-as.integer(pop_init_df$TB_compartment)
pop_init_df$DR_compartment<-as.integer(pop_init_df$DR_compartment)
pop_init_df$HIV_compartment<-as.integer(pop_init_df$HIV_compartment)
pop_init_df$G_compartment<-as.integer(pop_init_df$G_compartment)
#Set of Scenarios (S)
#S_SET<-1:10
################ DEFINE SETS ###############################
#TB states (TB)
#1:Uninfected, not on IPT;
#2:Uninfected, on IPT;
#3:LTBI, infected recently (within the past two-years)
#4: LTBI, infected remotely (more than two-years ago)
#5: LTBI, on IPT
#6: Active
#7: Recovered/Treated
#8: LTBI, after IPT
TB_SET<-1:8
#TB subsets - groups of compartments
TB_SUBSET_UNINFECTED<-1:2
TB_SUBSET_IPT<-c(2,5)
TB_SUBSET_LTBI<-3:5
TB_SUBSET_IPT_INIT_FROM<-c(1,3,4)
#TB subsets - individual compartments
TB_SUBSET_UNINFECTED_NOIPT<-1
TB_SUBSET_UNINFECTED_IPT<-2
TB_SUBSET_INFECTED_RECENT<-3
TB_SUBSET_INFECTED_REMOTE<-4
TB_SUBSET_INFECTED_IPT<-5
TB_SUBSET_ACTIVE<-6
TB_SUBSET_RECOVERED<-7
TB_SUBSET_AFTERIPT<-8
#DR - Set of TB Drug Resistance States (DR)
#1: Drug-susceptible (DS)
#2: Multidrug resistant (MDR)
DR_SET<-1:2
#TB subsets - individual compartments
DR_SUBSET_DS<-1
DR_SUBSET_MDR<-2
#4 HIV compartments (HIV)#
#1 : HIV Negative
#2 : HIV Positive CD4 > 200 - No ART
#3 : HIV Positive CD4 =<: 200 - No Art
#4 : HIV Positive - ART
HIV_SET<-1:4
#HIV subset groups
HIV_SUBSET_POS_NOART<-2:3
#HIV subsets - individual compartments
HIV_SUBSET_NEG <- 1
HIV_SUBSET_POS_CD4MORE <-2
HIV_SUBSET_POS_CD4LESS <-3
HIV_SUBSET_POS_ART <- 4
#Genders (G): Male : 1, Female : 2
G_SET<-1:2
#Gender subsets - individual compartments
G_SUBSET_M<-1
G_SUBSET_F<-2
#Set of policies (P):
#1 : Standard of care only, no ART or IPT delivery (base)
#2: Standard of care and community-based ART delivery only, no IPT delivery
#3: Standard of care and community-based ART and IPT delivery
P_SET<-1:3
P_SUBSET_BASE <-1
P_SUBSET_NO_IPT_DELIVERY <-2
P_SUBSET_IPT_DELIVERY <- 3
#Time Horizon (5 years)
TT<-5
time_interval <- 1/12
TT_SET <- c(1:(12*TT))*time_interval
######create compartment ids and reference matrix to go between multidementional arrays and 1D array####
n_compartments <- length(TB_SET)*length(DR_SET)*length(HIV_SET)*length(G_SET)
compartment_id<-rep(NA, n_compartments)
#create 1_D array that contains all compartment names (for ODE) - in the same order as the ref mat (below)
#iterator for loop
n = 0
lapply(TB_SET, function(t){
lapply(DR_SET, function(r){
lapply(HIV_SET, function(h){
lapply(G_SET, function(g){
n <<- n+1
compartment_id[n] <<- paste0("N_", t, "_", r, "_", h, "_", g)
})
})
})
})
#create matrix to look up location of compartment in 1-D array
N_t_r_h_g_ref <-array(data = 0, dim = c(length(TB_SET),
length(DR_SET),
length(HIV_SET),
length(G_SET)))
#iterator for loop
n = 0
lapply(TB_SET, function(t){
lapply(DR_SET, function(r){
lapply(HIV_SET, function(h){
lapply(G_SET, function(g){
n <<- n + 1
N_t_r_h_g_ref[t,r,h,g] <<- n
})
})
})
})
#create delta compartment ids
d_compartment_id<-paste0('d', compartment_id)
##########POPULATION##########
#set initial populations
N_t_r_h_g_init <-c()
lapply(TB_SET, function(t){
lapply(DR_SET, function(r){
lapply(HIV_SET, function(h){
lapply(G_SET, function(g){
temp <- pop_init_df%>%
filter(TB_compartment == t,
DR_compartment == r,
HIV_compartment == h,
G_compartment == g)
N_t_r_h_g_init <<- c(N_t_r_h_g_init, temp$Reference_expected_value)
})
})
})
})
#make into 1D array for ODE
compartments_init <- c(N_t_r_h_g_init) #under all policies the initial pop is the same so can just set init population using any aribritrary policy
names(compartments_init) <- compartment_id
#create a matrix for recording FOI over time
lambda_r_g_tau_p <-array(data=0, dim = c(length(DR_SET),
length(G_SET),
length(TT_SET),
length(P_SET)
))
#create a matrix for recording deaths over time
mortality_t_r_h_g_tau_p <-array(data=0, dim = c(length(TB_SET),
length(DR_SET),
length(HIV_SET),
length(G_SET),
length(TT_SET),
length(P_SET)
))
#############MODEL PARAMETERS#############
#########Parameters that impact force of infection#######
#Number of effective contact for TB transmission per infectious year for gender g
beta_g <- array(data = 0, dim = length(G_SET))
#filter dataframe for beta params
beta_params <- param_df%>%
filter(notation == 'beta')
lapply(G_SET, function (g){
temp <- beta_params%>%filter(G_compartment == g)
beta_g[g] <<- temp$Reference_expected_value
})
#rm dataframe for beta params
rm(beta_params)
#Relative transmissibility of TB in populations living in HIV compartment h
phi_h <-array(data = 0, dim = length(HIV_SET))
#filter dataframe for phi params
phi_params <- param_df%>%
filter(notation == 'phi')
lapply(HIV_SET, function(h){
temp <- phi_params%>%filter(HIV_compartment == h)
phi_h[h] <<- temp$Reference_expected_value
})
rm(phi_params)
#Fraction of new TB infections that are MDR-TB
varepsilon_g <-array(data = 0, dim = length(G_SET))
#filter dataframe for varepsilon params
varepsilon_params <- param_df%>%
filter(notation == 'varepsilon')
lapply(G_SET, function(g){
temp <- varepsilon_params%>%filter(G_compartment == g)
varepsilon_g[g] <<- temp$Reference_expected_value
})
rm(varepsilon_params)
#Indicator for whether infection with given TB strain can occur while on IPT for populations in DR compartment r
iota_r <-array(data = 0, dim = length(DR_SET))
#filter dataframe for iota params
iota_params <- param_df%>%
filter(notation == 'iota')
lapply(DR_SET, function(r){
temp <- iota_params%>%filter(DR_compartment == r)
iota_r[r] <<- temp$Reference_expected_value
})
rm(iota_params)
#Indicator the diminished force of infection due to partially-protective effects of IPT after moving off of IPT for populations with LTBI
#filter dataframe for upsilon params
upsilon_params <- param_df%>%
filter(notation == 'upsilon')
upsilon <- upsilon_params$Reference_expected_value
rm(upsilon_params)
#Indicator that diminishes force of infection due to the partially-protective effect of LTBI infection and acquiring a new TB infection
#filter dataframe for zeta params
zeta_params <- param_df%>%
filter(notation == 'zeta')
zeta <- zeta_params$Reference_expected_value
rm(zeta_params)
###########Parameters that describe TB progression##############
#Rate of IPT initiation from TB compartment t and HIV compartment h for gender g under policy p, per year
#0 where not applicable
kappa_t_h_g_p <- array(data = 0, dim = c(length(TB_SET),
length(HIV_SET),
length(G_SET),
length(P_SET)))
#filter dataframe for kappa params
kappa_params <- param_df%>%
filter(notation == 'kappa')
lapply(TB_SUBSET_IPT_INIT_FROM, function(t){
lapply(HIV_SET, function(h){
lapply(G_SET, function(g){
lapply(P_SET, function(p){
temp <- kappa_params%>%
filter(TB_compartment == t,
HIV_compartment == h,
G_compartment == g,
P_compartment == p)
kappa_t_h_g_p[t,h,g,p] <<- temp$Reference_expected_value
})
})
})
})
rm(kappa_params)
#Rate rate of moving off of IPT from TB compartment t under policy p, per year
#0 where not applicable
#filter dataframe for omega params
omega_params <- param_df%>%
filter(notation == 'omega')
omega <- omega_params$Reference_expected_value
rm(omega_params)
