pop_init_df <- read.csv('pop_init_df.csv')
mort_df <- read.csv('mort_df.csv')
hiv_transition_df<-read.csv('hiv_transmission_df.csv')
birth_rate_df<-read.csv('birth_rate_df.csv')
#clean dataframe column names for consistency
names(param_df)<-str_replace_all(names(param_df), c(" " = "_" , "-" = "_" ))
names(pop_init_df)<-str_replace_all(names(pop_init_df), c(" " = "_" , "-" = "_" ))
#make sure all compartments are integer type for proper indexing#
param_df$TB_compartment<-as.integer(param_df$TB_compartment)
param_df$DR_compartment<-as.integer(param_df$DR_compartment)
param_df$HIV_compartment<-as.integer(param_df$HIV_compartment)
param_df$G_compartment<-as.integer(param_df$G_compartment)
param_df$P_compartment<-as.integer(param_df$P_compartment)
mort_df$TB_compartment<-as.integer(mort_df$TB_compartment)
mort_df$HIV_compartment<-as.integer(mort_df$HIV_compartment)
mort_df$G_compartment<-as.integer(mort_df$G_compartment)
mort_df$year<-as.integer(mort_df$year)
#establish compartment and dcompartment ids
pop_init_df<- pop_init_df%>%
mutate(compartment_id = paste0("N_", TB_compartment, "_", DR_compartment ,"_", HIV_compartment, "_", G_compartment),
dcompartment_id = paste0("dN_", TB_compartment, "_", DR_compartment ,"_", HIV_compartment, "_", G_compartment))
################ DEFINE SETS ###############################
#######8 TB set description (TB)#########
#1:Uninfected, not on IPT;
#2:Uninfected, on IPT;
#3:LTBI, infected recently (within the past two-years)
#4: LTBI, infected remotely (more than two-years ago)
#5: LTBI, on IPT
#6: Active
#7: Recovered/Treated
#8: LTBI, after IPT
TB_SET<-1:8
######4 HIV compartments description (HIV)#########
#1 : HIV Negative
#2 : HIV Positive CD4 > 200 - No ART
#3 : HIV Positive CD4 =<: 200 - No Art
#4 : HIV Positive - ART
HIV_SET<-1:4
######2 Drug Resistance compartments description (DR)#########
#1 : Drug Susceptible
#2 : Multi Drug Resistant
DR_SET<-1:2
#######2 Gender compartments description (G)########
#1: Male
#2: Female
G_SET<-1:2
#######Parameter extraction########
######## PARAMETERS THAT IMPACT FORCE OF INFECTION #######
######### beta_g - Number of effective contacts for TB transmission per infectious year######
beta_g <- param_df%>%
filter(notation == 'beta')%>%
arrange(G_compartment)
beta_g <- beta_g$Reference_expected_value
#beta<-1
###### phi_h - Relative transmissibility of TB in HIV pops#########
phi_h <- array(0, dim = length(HIV_SET))
for (h in HIV_SET){
temp <- param_df%>%
filter(notation == 'phi',
HIV_compartment == h)
phi_h[h] <- temp$Reference_expected_value
}
#### varepsilon_g - Fraction of new TB infections that are MDR-TB ####
varepsilon_g <- param_df%>%
filter(notation == 'varepsilon')%>%
arrange(G_compartment)
varepsilon_g <- varepsilon_g$Reference_expected_value
##### iota_r - Indicator for whether infection with given TB strain can occur while on IPT by DR compartment#####
iota_r <- param_df%>%
filter(notation == 'iota')
iota_r <- iota_r$Reference_expected_value
##### zeta - Indicator that diminishes force of infection due to the partially-protective effect of LTBI infection and acquiring a new TB infection ######
zeta <- param_df%>%
filter(notation == 'zeta')
zeta <-zeta$Reference_expected_value
#########Parameters that Describe TB progression ######
#### kappa_t_h_g_p - Rate of IPT initiation, per year ####
#currently averaged over gender, and only testing for policy 1
kappa_t_h_g <- array(data = 0, c(length(TB_SET), length(HIV_SET), length(G_SET)))
for (t in TB_SET){
for (h in HIV_SET){
for (g in G_SET){
temp <- param_df%>%
filter(P_compartment == 1,
notation == 'kappa',
TB_compartment == t,
HIV_compartment == h,
G_compartment == g)
if (nrow(temp) == 1){
kappa_t_h_g[t,h,g] <- temp$Reference_expected_value
}
}
}
}
####### varpi_g - IPT adherence #######
#currently averaged over gender, and only testing for policy 1
varpi_g <- param_df%>%
filter(P_compartment == 1, notation == 'varpi')%>%
arrange(G_compartment)
varpi_g <- varpi_g$Reference_expected_value
##### omega - Rate of moving off of IPT, per year ####
omega <-param_df%>%filter(notation == 'omega')
omega <- omega$Reference_expected_value
######### pi_i_t - Base rates of TB progression  #####
pi_i_t <- array(data = 0, c(length(TB_SET), length(TB_SET)))
for (t_from in TB_SET){
for (t_to in TB_SET){
num_temp = (t_from*10) + t_to
temp <- param_df%>%
filter(notation == 'pi',
TB_compartment == num_temp)
if (nrow(temp) == 1){
pi_i_t[t_from,t_to] <- temp$Reference_expected_value
}
}
}
#########theta_h - relative risk of TB progression###########
theta_h <-array(0, dim = length(HIV_SET))
for (h in HIV_SET){
temp <- param_df%>%
filter(notation == 'theta',
HIV_compartment == h)
theta_h[h]<- temp$Reference_expected_value
}
###########gamma_r -indicator if DR compartment can move onto after IPT####
gamma_r <- c(1,0)
#######Parameters that describe HIV progression########
#####eta_i_h_g rate HIV transitions ######
HIV_transitions_param_func<-function(yr){
eta_i_h_g <- array(0, dim=c(length(HIV_SET),
length(HIV_SET),
length(G_SET)))
for (g in G_SET){
#get HIV progression CD4 counts
temp <- param_df%>%
filter(notation == 'eta',
HIV_compartment == 23,
P_compartment == 1,
G_compartment == g)
eta_i_h_g[2,3,g]<-temp$Reference_expected_value
gender_name <-if_else(g == 1, 'Males', 'Females')
temp2<-hiv_transition_df%>%
filter(gender == gender_name,
year == yr)
eta_i_h_g[1,2,g]<-temp2$hiv_incidence
eta_i_h_g[2,4,g]<-temp2$eta_24
eta_i_h_g[3,4,g]<-temp2$eta_34
}
return(eta_i_h_g)
}
#########parameters for death and aging rates ###########
######mu_t_h_g - mortality rates ########
mort_param_func <-function(yr){
mu_t_h_g <- array(0, dim = c(length(TB_SET), length(HIV_SET), length(G_SET)))
for (t in TB_SET){
for (h in HIV_SET){
for (g in G_SET){
temp <- mort_df%>%
filter(year == yr,
TB_compartment == t,
HIV_compartment == h,
G_compartment == g)
mu_t_h_g[t,h,g] <- temp$mort_rate
}
}
}
return(mu_t_h_g)
}
########alpha_in_t_h_g - Proportion of population that enters each compartment#####
birth_rate_param_func<-function(yr){
alpha_in_t_r_h_g <- array(data = 0, c(length(TB_SET),
length(DR_SET),
length(HIV_SET),
length(G_SET)))
for (t in TB_SET){
for (r in DR_SET){
for (h in HIV_SET){
for (g in G_SET){
temp <- (unique(birth_rate_df$prop_of_pop[(birth_rate_df$year == yr) &
(birth_rate_df$TB_compartment == t)&
(birth_rate_df$DR_compartment == r)&
(birth_rate_df$HIV_compartment == h)&
(birth_rate_df$G_compartment == g)]))
alpha_in_t_r_h_g[t,r,h,g] <- temp
}
}
}
}
return(alpha_in_t_r_h_g)
}
####### alpha_out - Rate of exit from the population ######
alpha_out <- param_df%>%filter(notation == 'alpha^out')
alpha_out <- alpha_out$Reference_expected_value
#############Pre-processing parameter equations, for ease of use in ode solver#######
####total_out_t_r_h - total amount leaving from compartment######
total_out_param_func<-function(mu_t_h_g){
total_out_t_r_h_g <- array(0, dim = length(TB_SET)*length(DR_SET)*length(HIV_SET)*length(G_SET))
count_temp <- 1
for (t in TB_SET){
for (r in DR_SET){
for (h in HIV_SET){
for (g in G_SET){
total_out_t_r_h_g[count_temp] <- (mu_t_h_g[t,h,g]*(1-alpha_out))+
((1-mu_t_h_g[t,h,g])*alpha_out)+
(mu_t_h_g[t,h,g]*alpha_out)
count_temp <- count_temp + 1
}
}
}
}
return(total_out_t_r_h_g)
}
#####N_init - total initial population in each compartment flattened in 1D array for ODE solver #####
#arrange pop init df, TB-->DR-->HIV-->G
pop_init_df<-pop_init_df%>%
arrange(G_compartment)%>%
arrange(HIV_compartment)%>%
arrange(DR_compartment)%>%
arrange(TB_compartment)
N_init <- pop_init_df$total_pop
names(N_init) <- c(pop_init_df$compartment_id)
####N_t_r_h_g - matrix that identifies the location of compartment in 1D array#####
N_t_r_h_g_ref <- array(0, dim = c(length(TB_SET), length(DR_SET), length(HIV_SET), length(G_SET)))
count_temp <- 1
for (t in TB_SET){
for (r in DR_SET){
for (h in HIV_SET){
for (g in G_SET){
N_t_r_h_g_ref[t,r,h,g] <- count_temp
count_temp <- count_temp + 1
}
}
}
}
#where the equations are stored
open_seir_model <- function(time, N_t_r_h_g, parms){
dN_t_r_h_g <- array(0, dim = length(TB_SET)*length(DR_SET)*length(HIV_SET)*length(G_SET))
names(dN_t_r_h_g) <- pop_init_df$dcompartment_id
#calculate time varying parameters
#Force of Infection Calculations
FOI_1_g <- array(0, dim = length(G_SET))
FOI_2_g <- array(0, dim = length(G_SET))
for (g in G_SET){
FOI_1_g[g]<-(beta_g[g]*(sum((phi_h)*N_t_r_h_g[N_t_r_h_g_ref[6, 1, HIV_SET,g]])/sum(N_t_r_h_g)))
}
for (g in G_SET){
FOI_2_g[g] <-(varepsilon_g[g]*FOI_1_g[g])/(1-varepsilon_g[g])
}
FOI_r <- c(sum(FOI_1_g), sum(FOI_2_g))
FOI <- sum(FOI_r)
#write year parameter for parameters that change over time
current_yr <-as.integer(start_yr+time)
print(time)
#HIV transitions
eta_i_h_g<-HIV_transitions_param_func(current_yr)
#alpha in proportions
alpha_in_t_r_h_g<-birth_rate_param_func(current_yr)
#deaths
mu_t_h_g<-mort_param_func(current_yr)
total_out_t_r_h_g<-total_out_param_func(mu_t_h_g)
#entries and exits from the population
B <- sum(total_out_t_r_h_g*N_t_r_h_g)
#######TB compartment 1 Equations #########
#Set DR compartment to 1, since not applicable to drug resistant compartments#
for (h in HIV_SET){
for (g in G_SET){
dN_t_r_h_g[N_t_r_h_g_ref[1,1,h,g]]<-(sum(alpha_in_t_r_h_g[1,1,h,g]*B) + #entries from births
(omega*N_t_r_h_g[N_t_r_h_g_ref[2,1,h,g]]) - #entries from off IPT
(total_out_t_r_h_g[N_t_r_h_g_ref[1,1,h,g]]*N_t_r_h_g[N_t_r_h_g_ref[1,1,h,g]]) - #exists from aging out and death
(FOI*N_t_r_h_g[N_t_r_h_g_ref[1,1,h,g]])- #exists from TB infection
(kappa_t_h_g[1,h,g]*N_t_r_h_g[N_t_r_h_g_ref[1,1,h,g]]) + #exists from on to IPT
(sum(eta_i_h_g[HIV_SET, h, g]*N_t_r_h_g[N_t_r_h_g_ref[1,1,HIV_SET,g]])) - #entries into HIV compartment
(sum(eta_i_h_g[h,HIV_SET, g])*N_t_r_h_g[N_t_r_h_g_ref[1,1,h,g]]) #exit from HIV compartment
)
}
}
#############TB compartment 2 Equations########
#Set DR compartment to 1, since not applicable to drug resistant compartments#
for (h in HIV_SET){
for (g in G_SET){
dN_t_r_h_g[N_t_r_h_g_ref[2,1,h,g]]<-((kappa_t_h_g[1,h,g]*N_t_r_h_g[N_t_r_h_g_ref[1,1,h,g]])- #entries from on to IPT
(total_out_t_r_h_g[N_t_r_h_g_ref[2,1,h,g]]*N_t_r_h_g[N_t_r_h_g_ref[2,1,h,g]])- #exists from aging out and death
(omega*N_t_r_h_g[N_t_r_h_g_ref[2,1,h,g]])- #exits from off IPT
((sum(iota_r*FOI_r))*N_t_r_h_g[N_t_r_h_g_ref[2,1,h,g]]) +#exits from infection (diminished for IPT)
(sum(eta_i_h_g[HIV_SET, h,g]*N_t_r_h_g[N_t_r_h_g_ref[2,1,HIV_SET,g]])) - #entries into HIV compartment
(sum(eta_i_h_g[h,HIV_SET,g])*N_t_r_h_g[N_t_r_h_g_ref[2,1,h,g]]) #exit from HIV compartment
)
}
}
#############TB compartment 3 Equations########
for (r in DR_SET){
for (h in HIV_SET){
for (g in G_SET){
dN_t_r_h_g[N_t_r_h_g_ref[3,r,h,g]]<-((alpha_in_t_r_h_g[3,r,h,g]*B) + #entries from births
(FOI_r[r]*N_t_r_h_g[N_t_r_h_g_ref[1,1,h,g]])+ #infection from compartment 1
(iota_r[r]*FOI_r[r]*N_t_r_h_g[N_t_r_h_g_ref[2,1,h,g]])+ #infections from compartment 2
(zeta*FOI_r[r]*sum(N_t_r_h_g[N_t_r_h_g_ref[4,DR_SET,h,g]]))+ #re-infection from compartment 4
(zeta*FOI_r[r]*sum(N_t_r_h_g[N_t_r_h_g_ref[7,DR_SET,h,g]]))+ #re-infection from compartment 7
(zeta*FOI_r[r]*sum(N_t_r_h_g[N_t_r_h_g_ref[8,DR_SET,h,g]]))- #re-infection from compartment 8
(total_out_t_r_h_g[N_t_r_h_g_ref[3,r,h,g]]*N_t_r_h_g[N_t_r_h_g_ref[3,r,h,g]]) - #exists from aging out and death
(pi_i_t[3,4]*N_t_r_h_g[N_t_r_h_g_ref[3,r,h,g]]) - #from recent to remote infection
(kappa_t_h_g[3,h,g]*N_t_r_h_g[N_t_r_h_g_ref[3,r,h,g]]) - #from recent to on IPT
((1/varpi_g[g])*theta_h[h]*pi_i_t[3,6]*N_t_r_h_g[N_t_r_h_g_ref[3,r,h,g]]) + #from recent TB infection to active
(sum(eta_i_h_g[HIV_SET,h,g]*N_t_r_h_g[N_t_r_h_g_ref[3,r,HIV_SET,g]])) - #entries into HIV compartment
(sum(eta_i_h_g[h,HIV_SET,g])*N_t_r_h_g[N_t_r_h_g_ref[3,r,h,g]]) #exit from HIV compartment
)
}
}
}
#############TB compartment 4 Equations########
for (r in DR_SET){
for (h in HIV_SET){
for (g in G_SET){
dN_t_r_h_g[N_t_r_h_g_ref[4,r,h,g]]<-((alpha_in_t_r_h_g[4,r,h,g]*B) + #entries from births
(pi_i_t[3,4]*N_t_r_h_g[N_t_r_h_g_ref[3,r,h,g]]) - #from recent to remote infection
(total_out_t_r_h_g[N_t_r_h_g_ref[4,r,h,g]]*N_t_r_h_g[N_t_r_h_g_ref[4,r,h,g]]) - #exists from aging out and death
(zeta*FOI*N_t_r_h_g[N_t_r_h_g_ref[4,r,h,g]])- #re-infection
(kappa_t_h_g[4,h,g]*N_t_r_h_g[N_t_r_h_g_ref[4,r,h,g]]) - #onto IPT
((1/varpi_g[g])*theta_h[h]*pi_i_t[4,6]*N_t_r_h_g[N_t_r_h_g_ref[4,r,h,g]]) + #from remote TB infection to active
(sum(eta_i_h_g[HIV_SET, h,g]*N_t_r_h_g[N_t_r_h_g_ref[4,r,HIV_SET,g]])) - #entries into HIV compartment
(sum(eta_i_h_g[h,HIV_SET,g])*N_t_r_h_g[N_t_r_h_g_ref[4,r,h,g]]) #exit from HIV compartment
)
}
}
}
#############TB compartment 5 Equations########
for (r in DR_SET){
for (h in HIV_SET){
for (g in G_SET){
dN_t_r_h_g[N_t_r_h_g_ref[5,r,h,g]] <-((kappa_t_h_g[3,h,g]*N_t_r_h_g[N_t_r_h_g_ref[3,r,h,g]]) + #from recent to on IPT
(kappa_t_h_g[4,h,g]*N_t_r_h_g[N_t_r_h_g_ref[4,r,h,g]]) - #onto IPT
(total_out_t_r_h_g[N_t_r_h_g_ref[5,r,h,g]]*N_t_r_h_g[N_t_r_h_g_ref[5,r,h,g]]) - #exists from aging out and death
((1/varpi_g[g])*theta_h[h]*pi_i_t[5,6]*N_t_r_h_g[N_t_r_h_g_ref[5,r,h,g]]) - #from TB infection on IPT to active
(gamma_r[r]*omega*N_t_r_h_g[N_t_r_h_g_ref[5,r,h,g]]) + #off IPT to after IPT
(sum(eta_i_h_g[HIV_SET, h,g]*N_t_r_h_g[N_t_r_h_g_ref[5,r,HIV_SET,g]])) - #entries into HIV compartment
(sum(eta_i_h_g[h,HIV_SET,g])*N_t_r_h_g[N_t_r_h_g_ref[5,r,h,g]]) #exit from HIV compartment
)
}
}
}
#############TB compartment 6 Equations########
for (r in DR_SET){
for (h in HIV_SET){
for (g in G_SET){
dN_t_r_h_g[N_t_r_h_g_ref[6,r,h,g]] <- ((alpha_in_t_r_h_g[6,r,h,g]*B) + #entries from births
((1/varpi_g[g])*theta_h[h]*pi_i_t[3,6]*N_t_r_h_g[N_t_r_h_g_ref[3,r,h,g]]) + #from recent TB infection to active
((1/varpi_g[g])*theta_h[h]*pi_i_t[4,6]*N_t_r_h_g[N_t_r_h_g_ref[4,r,h,g]]) + #from remote TB infection to active
((1/varpi_g[g])*theta_h[h]*pi_i_t[5,6]*N_t_r_h_g[N_t_r_h_g_ref[5,r,h,g]]) + #from TB infection on IPT to active
((1/varpi_g[g])*theta_h[h]*pi_i_t[8,6]*N_t_r_h_g[N_t_r_h_g_ref[8,r,h,g]]) - #from TB after on IPT to active
(total_out_t_r_h_g[N_t_r_h_g_ref[6,r,h,g]]*N_t_r_h_g[N_t_r_h_g_ref[6,r,h,g]]) - #total out
(pi_i_t[6,7]*N_t_r_h_g[N_t_r_h_g_ref[6,r,h,g]]) +#from active to recovered
(sum(eta_i_h_g[HIV_SET, h, g]*N_t_r_h_g[N_t_r_h_g_ref[6,r,HIV_SET,g]])) - #entries into HIV compartment
(sum(eta_i_h_g[h,HIV_SET,g])*N_t_r_h_g[N_t_r_h_g_ref[6,r,h,g]]) #exit from HIV compartment
)
}
}
}
#############TB compartment 7 Equations########
for (r in DR_SET){
for (h in HIV_SET){
for (g in G_SET){
dN_t_r_h_g[N_t_r_h_g_ref[7,r,h,g]] <- ((pi_i_t[6,7]*N_t_r_h_g[N_t_r_h_g_ref[6,r,h,g]]) - #from active to recovered
(total_out_t_r_h_g[N_t_r_h_g_ref[7,r,h,g]]*N_t_r_h_g[N_t_r_h_g_ref[7,r,h,g]]) - #total out
(zeta*FOI*N_t_r_h_g[N_t_r_h_g_ref[7,r,h,g]]) + #re-infection from compartment 7
(sum(eta_i_h_g[HIV_SET, h,g]*N_t_r_h_g[N_t_r_h_g_ref[7,r,HIV_SET,g]])) - #entries into HIV compartment
(sum(eta_i_h_g[h,HIV_SET,g])*N_t_r_h_g[N_t_r_h_g_ref[7,r,h,g]]) #exit from HIV compartment
)
}
}
}
#############TB compartment 8 Equations########
for (r in DR_SET){
for (h in HIV_SET){
for (g in G_SET){
dN_t_r_h_g[N_t_r_h_g_ref[8,r,h,g]] <- ((gamma_r[r]*omega*N_t_r_h_g[N_t_r_h_g_ref[5,r,h,g]]) - #off IPT to after IPT
((1/varpi_g[g])*theta_h[h]*pi_i_t[8,6]*N_t_r_h_g[N_t_r_h_g_ref[8,r,h,g]]) - #from TB after on IPT to active
(total_out_t_r_h_g[N_t_r_h_g_ref[8,r,h,g]]*N_t_r_h_g[N_t_r_h_g_ref[8,r,h,g]]) - #total out
(zeta*FOI*N_t_r_h_g[N_t_r_h_g_ref[8,r,h,g]])+
(sum(eta_i_h_g[HIV_SET, h,g]*N_t_r_h_g[N_t_r_h_g_ref[8,r,HIV_SET,g]])) - #entries into HIV compartment
(sum(eta_i_h_g[h,HIV_SET,g])*N_t_r_h_g[N_t_r_h_g_ref[8,r,h,g]]) #exit from HIV compartment
)
}
}
}
list(dN_t_r_h_g)
}
#Time Horizon and Evaluation intervals (1 month)
start_yr = 1990
end_yr = 2017
TT<-end_yr-start_yr
time_interval <- 1/12
TT_SET <- seq(from = 0, to = TT, by = time_interval)
#feed in to solve, evaluation time intervals (TT_SET),
#initial population (N_init)
#differential equations and dynamic parameter (open_seir_model)
#specify differential solver (lsoda)
# read params from global (NULL)
out_df_all<-data.frame()
sim_id <-1
beta_1_test<-c(.0065)
beta_2_test<-c(.0055)
pi_i_t[6,7]<-1
for (beta_1 in beta_1_test){
for (beta_2 in beta_2_test){
#to track how long it takes to solve
start<-Sys.time()
beta_g[1]<-beta_1
beta_g[2]<-beta_2
out_df<-as.data.frame(ode(times = TT_SET, y = N_init,
func = open_seir_model, method = 'lsoda',
parms = NULL))
out_df<- cbind(year = as.integer(start_yr+out_df$time), sim_id = rep(sim_id, times = nrow(out_df)),
beta_1 = rep(beta_1, times = nrow(out_df)), beta_2 = rep(beta_2, times = nrow(out_df)),
out_df)
out_df_all<-rbind(out_df_all, out_df)
sim_id <- sim_id + 1
print(Sys.time()-start)
}
}
#out_df$total_pop<-rowSums(out_df[6:ncol(out_df)])
#####Calibration Calculations######
#melt out all df for easy manipulation
out_df_melt <-melt(out_df, id.vars = c("time", "year", 'sim_id', "beta_1", "beta_2"))
out_df_melt <- cbind(out_df_melt,
data.frame(do.call('rbind',
strsplit(as.character(out_df_melt$variable),
'_',fixed=TRUE))))
names(out_df_melt)[names(out_df_melt) == "X2"] <- "TB_compartment"
names(out_df_melt)[names(out_df_melt) == "X3"] <- "DR_compartment"
names(out_df_melt)[names(out_df_melt) == "X4"] <- "HIV_compartment"
names(out_df_melt)[names(out_df_melt) == "X5"] <- "G_compartment"
out_df_melt<-out_df_melt%>%select(-c('X1'))
out_df_melt$month <- round(((out_df_melt$time%%1)*(12)+1),0)
TB_overtime<-out_df_melt%>%
group_by(time, TB_compartment)%>%
summarise(total = sum(value))
ggplot(data = TB_overtime%>%filter(TB_compartment == 6),
mapping = aes(x = time, y = total, fill = TB_compartment))+
geom_area()
#hiv compartments overtime test to compare with caras coverages
#yay it works!!!
out_df_by_HIV<-out_df_melt%>%
group_by(HIV_compartment, G_compartment, time)%>%
summarise(total_hiv_pop = sum(value),
)
#testing hiv prevalence
ggplot(data = out_df_by_HIV,
mapping = aes(x = time, y = total_pop, fill = HIV_compartment))+
geom_area()
#filter only active TB compartments, since that is what we are calibrating to
out_df_TB_active<-out_df_melt%>%
filter(TB_compartment == 6)%>%
mutate(calibration_group_name = if_else((HIV_compartment == 1 & G_compartment == 1),
'TB_only_Male',
if_else((HIV_compartment != 1 & G_compartment == 1),
'HIV/TB_coinfection_Male',
if_else((HIV_compartment == 1 & G_compartment == 2),
'TB_only_Female',
'HIV/TB_coinfection_Female'))),
calibration_group_id = if_else((HIV_compartment == 1 & G_compartment == 1),
1,
if_else((HIV_compartment != 1 & G_compartment == 1),
2,
if_else((HIV_compartment == 1 & G_compartment == 2),
3,
4))))
#so I do not need to call on mort_param_func too many times
out_df_TB_active<-out_df_TB_active%>%
arrange(year)
#testing TB prev overtime
test<-out_df_TB_active%>%
group_by(G_compartment, HIV_compartment, time)%>%
summarise(value = sum(value))%>%
mutate(ID = paste0('HIV_', HIV_compartment, '_G_', G_compartment))
ggplot(data = test, mapping = aes(x = time, y = value, fill = ID))+
geom_area()
TB_grouping_test_df<-out_df_melt%>%
group_by(TB_compartment, time)%>%
summarise(total_pop = sum(value))
ggplot(data = TB_grouping_test_df%>%filter(TB_compartment == 6), mapping = aes(x = time, y = total_pop,
fill = TB_compartment))+
geom_area()
counter <-1
mort_est <- rep(0, times = nrow(out_df_TB_active))
for (yr in start_yr:end_yr){
temp<-out_df_TB_active%>%
filter(year == yr)
mu_t_h_g<-mort_param_func(yr)
for (row in 1:nrow(temp)){
hiv <- as.integer(temp[row, 'HIV_compartment'])
gender <-as.integer(temp[row, 'G_compartment'])
pop<-as.double(temp[row, 'value'])
mort_rate<-(mu_t_h_g[6,hiv,gender]*(1/12))
mort_est[counter]<-(mort_rate*pop)
counter <- counter + 1
}
}
out_df_TB_active$mort_est <- mort_est
#group and combine data for calibration
setwd(indir)
calibration_rates_df<-read.csv('calibration_rates_df.csv')
calibration_df<-out_df_TB_active%>%
group_by(calibration_group_id, calibration_group_name,
year)%>%
summarise(model_rate = sum(mort_est))%>%
left_join(calibration_rates_df, by = c('calibration_group_name', 'year'))%>%
filter(year < 2017)
#mutate(time = time+1990) #so that time graphs go from 1990 - 2017
calibration_df$within<-if_else((calibration_df$model_rate<=calibration_df$max_rate)&(calibration_df$model_rate>=calibration_df$min_rate),
1, 0)
calibration_df$diff <-calibration_df$model_rate-calibration_df$expected_rate
calibration_df$mse <-(calibration_df$diff)^2
